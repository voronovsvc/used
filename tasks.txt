Я тут подумал не будем никаких параметров передавать в getInstance(), убирай их. Мы же константы объявили с конфигами базы, они везде будут доступны и так.
1. Надо добавить в класс DB две новых приватных переменных:
$pdo и $statement. В $pdo будем хранить объект PDO, а в $statement его промежуточные состояния.

2. В конструкторе класса DB создаешь новый объект PDO и запихиваешь его в переменную $pdo. Все параметры для PDO берешь из констант, которые в конфиге. Подробней как создать новый объект PDO посмотришь в мануале (http://php.net/manual/ru/pdo.connections.php), это не сложно. Нужно собрать строку вида 'mysql:host=localhost;dbname=test',
где dbname надо заменить на название базы из конфига, а localhost на сервер из конфига. 
И передать эту строку вместе с именем пользователя и паролем при создании объекта PDO. Там есть примеры.

3. В PDO есть такое понятие как подготовленые запросы (http://php.net/manual/ru/pdo.prepared-statements.php).
То есть сначала запрос надо подготовить, а потом уже выполнить. Так более безопасно и можно выполнять один и тот же запрос несколько раз, не создавая его заново.
Для этого добавим новый метод в класс DB. Публичный метод query(). 
Который будет принимать один единственный параметр - $sql. Это будет SQL-строка нашего запроса.
Задача метода подготовить запрос с помощью объекта PDO и сохранить его в переменную класса $statement(см. пункт 2).
Для подготовки запроса в PDO есть метод prepare(). Сам объект PDO у тебя хранится в переменной $pdo (см. пункт 2).

4. Метод query() только подготавливает запрос, но не выполняет его!!!
Для того чтобы его выполнить добавим еще один метод execute().
Задача метода получить текущий $statement (то есть текущий подготовленный запрос), применить к нему метод execute() и вернуть полученный результат:
return $this->statement->execute();
