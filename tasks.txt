У нас теперь есть крутой шаблонизатор, теперь надо сделать его еще круче.
1. Надо переименовать layout.php в layout.tpl. Все таки это тоже файл шаблона, хоть и общего. Так будет правильней.
2. Общий шаблон у нас теперь есть, но в нем тоже кое-что придется менять на разных страницах.
В первую очередь это title (тот что в теге <title>).
Поэтому нужно в класс View добавить приватное свойство title, по-умолчанию пустое или например название сайта.

Мы делаем все свойства приватными, что к ним нельзя было обратиться напрямую. Это считается хорошей практикой, 
таким образом никто случано не изменит его.
Для доступа и изменения таких свойств обычно используют специальные методы, 
которые называют геттеры (методы для получения) и сеттеры (метод для изменения).
Если хочешь почитай об этом подробней (http://habrahabr.ru/post/197332/), 
но пока не обращай внимания на магические методы.

Для того чтобы устанавливать значения свойства title нам понадобиться написать в классе View публичный метод-сеттер - setTitle(),
который будет принимать строку, которую будет записывать в приватное свойство $title;
В методе render() ты сможешь получить title из свойста, записать его в переменную, которую потом выведешь в layout.tpl

Таким образом в контроллерах можно будет делать так:
$view = new View;
$view->setTitle('Добро пожаловать в каталог подержанных вещей');
$view->render('main/index.tpl');

Для каждой страницы можно будет указать title перед рендером. Сделай разные заголовки для главной и для страницы каталогов.

3. Давай создадим в корне папку app и перенесем в нее папки view, core, controllers
Теперь в корне нужно создать папки css, img, и js. В них будем хранить CSS стили, JS скрипты и картинки для сайта
В папке css создай файл style.css
В папке js создай файл scipts.js

За основу верстки возьмем Bootstrap фреймворк (http://getbootstrap.com/getting-started/)
Подключи в layout.tpl его файлы как указано в инструкции Bootstrap CDN
Теперь подключи там же два наших файла css/style.css и js/scripts.js

4. У нас сейчас всего два контроллера и уже сейчас наблюдается дублирование кода. Крутые программисты так не делают.
В обоих контроллерах ты создаешь объект View, если в контроллер добавим еще методы, 
то в каждом из них придется писать $view = new View;

Но ООП это круто, модно, современно, поэтому нужно создать класс Controller в файле app/core/controller.php
Это будет родительский класс для всех контроллеров, в нем надо сделать публичное свойство $view.
И в конструкторе класса (Этот метод который вызывается при создании объекта этого класса) создавать новый объект класса View
и записывать его в это свойство:
$this->view = new View();

Подробней о конструкторах можешь посмотреть здесь (http://php.net/manual/ru/language.oop5.decon.php)

Отнаследуй все наши котроллеры от нового класса Controller. (Не забудь подключить файл с новым классом в index.php)
Теперь во всех методах наших контроллеров у тебя будет готовый объект класса View, который будет доступен в 
$this->view;

То есть теперь можно будет делать так:
$this->view->setTitle('Заголовок');
$this->view->render('catalog/index.tpl');
И нам не надо каждый раз создавать новый объект View
